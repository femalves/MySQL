mysql-ctl start

mysql-ctl cli

mysql-ctl stop

exit;

quit;

\q;

ctrl-c

--comment

________________________________________________

mysql-ctl cli

use cat_app;

source first_file.sql

DESC cats;

_______________________________________________

SHOW DATABASES;

DROP DATABASE <name>;

USE <database name>;

CREATE DATABASE <name>;

SELECT database(); #currently used

CREATE TABLE <name> (
name VARCHAR(100),
age INT
);

SHOW TABLES;

SHOW COLUMNS FROM <tablename>;

DESC <tablename>;

DROP TABLE <tablename>;

_____________________________________________

INSERT INTO cats(name, age) VALUES (‘Jetson’, 7);

INSERT INTO cats(name, age)
VALUES  (‘Jetson’, 7),
		(‘Anima’, 1),
		(‘Blue’, 3);

—————————————————————

SHOW WARNINGS;

CREATE TABLE cats2
( name VARCHAR(100) NOT NULL,
age INT NOT NULL);

CREATE TABLE cats3
( 	name VARCHAR(100) DEFAULT ‘unnamed’,
	age INT DEFAULT 99
);

————————————————————-
CREATE TABLE unique_cats (
cat_id INT NOT NULL AUTO_INCREMENT,
name VARCHAR(100),
age INT,
PRIMARY KEY(cat_id));

CREATE TABLE employees (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
last_name VARCHAR (20) NOT NULL,
first_name VARCHAR (20) NOT NULL,
middle_name VARCHAR(20),
age INT NOT NULL,
current_status VARCHAR (255) NOT NULL DEFAULT ‘employed’,
);

_____________________________________________

CREATE TABLE cats   (
cat_id INT NOT NULL AUTO_INCREMENT,
name   VARCHAR(100),
breed  VARCHAR(100),
age    INT,
PRIMARY KEY (cat_id)  );

INSERT INTO cats(name, breed, age)
VALUES ('Ringo', 'Tabby', 4),
       ('Cindy', 'Maine Coon', 10),
       ('Dumbledore', 'Maine Coon', 11),
       ('Egg', 'Persian', 4),
       ('Misty', 'Tabby', 13),
       ('George Michael', 'Ragdoll', 9),
       ('Jackson', 'Sphynx', 7);

_______________________________________________

SELECT name FROM cats;
SELECT age FROM cats;
SELECT name, age FROM cats; #the order matters

_______________________________________________

SELECT * FROM cats WHERE age=4;
SELECT * FROM cats WHERE name='Egg';#case insensitive

_______________________________________________

SELECT cat_id FROM cats;
SELECT name, breed FROM cats;
SELECT name, age FROM cats WHERE breed='Tabby';
SELECT cat_id, age FROM cats WHERE cat_id = age;

________________________________________________

SELECT cat_id AS id, name FROM cats;

________________________________________________

UPDATE cats SET breed='Shorthair',
WHERE breed='Tabby';

UPDATE cats SET age=14
WHERE name='Misty';

UPDATE cats SET name='Jack'
WHERE name='Jackson';

UPDATE cats SET breed='British Shorthair'
WHERE name='Ringo';

UPDATE cats SET age=12
WHERE breed='Maine Coons';

________________________________________________

DELETE FROM cats WHERE name='Egg';

DELETE FROM cats WHERE age=4;

DELETE FROM cats WHERE age=cat_id;

DELETE FROM cats;

________________________________________________

CREATE DATABASE shirts_db;
USE shirts_db;
CREATE TABLE shirts (
shirt_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
article VARCHAR (100),
color VARCHAR (100),
shirt_size VARCHAR (100),
last_worn INT NOT NULL,
);

INSERT INTO shirts(article, color, shirt_size, last_worn)
VALUES 	('t-shirt', 'white', 'S', 10),
				('t-shirt', 'green', 'S', 200),
				('polo shirt', 'black', 'M', 10),
				('tank top', 'blue', 'S', 50),
				('t-shirt', 'pink', 'S', 0),
				('polo shirt', 'red', 'M', 5),
				('tank top', 'white', 'S', 200),
				('tank top', 'blue', 'M', 15);

INSERT INTO shirts(article, color, shirt_size, last_worn)
VALUES ('polo shirt', 'purple', 'M', 50);

SELECT article, color FROM shirts;
SELECT article, color, shirt_size, last_worn FROM shirts
WHERE shirt_size='M';

UPDATE shirts SET shirt_size='L',
WHERE article='polo shirt';

UPDATE shirts SET last_worn=0,
WHERE last_worn=15;

UPDATE shirts SET color='off white', size='XS'
WHERE color='white';

DELETE FROM shirts WHERE last_worn=200;

DELETE FROM shirts WHERE article='tank top';

DELETE FROM shirts;

DROP TABLE shirts;



________________________________________________
String functions

CONCAT(x,y,z) // from slides

CONCAT(column, anotherColumn)

SELECT
  CONCAT(author_fname, ' ', author_lname)
FROM books;

SELECT
  CONCAT(author_fname, ' ', author_lname)
  AS 'full name'
FROM books;

SELECT author_fname AS first, author_lname AS last,
  CONCAT(author_fname, ' ', author_lname) AS full
FROM books;

SELECT author_fname AS first, author_lname AS last,
  CONCAT(author_fname, ', ', author_lname) AS full
FROM books;

SELECT CONCAT(title, '-', author_fname, '-', author_lname) FROM books;

SELECT
    CONCAT_WS(' - ', title, author_fname, author_lname)
FROM books;

_____________________________________________

SELECT SUBSTRING('Hello World', 1, 4);

SELECT SUBSTRING('Hello World', 7);

SELECT SUBSTRING('Hello World', 3, 8);

SELECT SUBSTRING('Hello World', 3);

SELECT SUBSTRING('Hello World', -3);

SELECT SUBSTRING('Hello World', -7);

SELECT title FROM books;

SELECT SUBSTRING("Where I'm Calling From: Selected Stories", 1, 10);

SELECT SUBSTRING(title, 1, 10) FROM books;

SELECT SUBSTRING(title, 1, 10) AS 'short title' FROM books;

SELECT SUBSTR(title, 1, 10) AS 'short title' FROM books;

SELECT CONCAT
    (
        SUBSTRING(title, 1, 10),
        '...'
    )
FROM books;

source book_code.sql

SELECT CONCAT
    (
        SUBSTRING(title, 1, 10),
        '...'
    ) AS 'short title'
FROM books;

source book_code.sql

command + slash to comment out

_____________________________________________

SELECT REPLACE('Hello World', 'Hell', '%$#@');

SELECT REPLACE('Hello World', 'l', '7');

SELECT REPLACE('Hello World', 'o', '0');

SELECT REPLACE('HellO World', 'o', '*');

SELECT
  REPLACE('cheese bread coffee milk', ' ', ' and ');

SELECT REPLACE(title, 'e ', '3') FROM books;

-- SELECT
--    CONCAT
--    (
--        SUBSTRING(title, 1, 10),
--        '...'
--    ) AS 'short title'
-- FROM books;

SELECT
    SUBSTRING(REPLACE(title, 'e', '3'), 1, 10)
FROM books;

SELECT
    SUBSTRING(REPLACE(title, 'e', '3'), 1, 10) AS 'weird string'
FROM books;

_____________________________________________

SELECT REVERSE('Hello World');

SELECT REVERSE('meow meow');

SELECT REVERSE(author_fname) FROM books;

SELECT CONCAT('woof', REVERSE('woof'));

SELECT CONCAT(author_fname, REVERSE(author_fname)) FROM books;

_____________________________________________

SELECT CHAR_LENGTH('Hello World');

SELECT author_lname, CHAR_LENGTH(author_lname) AS 'length' FROM books;

SELECT
CONCAT(author_lname, ' is ', CHAR_LENGTH(author_lname), ' characters long')
FROM books;

_____________________________________________

SELECT UPPER('Hello World');

SELECT LOWER('Hello World');

SELECT UPPER(title) FROM books;

SELECT CONCAT('MY FAVORITE BOOK IS ', UPPER(title)) FROM books;

SELECT CONCAT('MY FAVORITE BOOK IS ', LOWER(title)) FROM books;
_____________________________________________
DISTINCT

SELECT DISTINCT author_lname FROM books;

SELECT DISTINCT CONCAT(author_fname, ' ', author_lname) FROM books;

SELECT DISTINCT author_fname, author_lname FROM books;

_____________________________________________
ORDER BY

SELECT author_lname FROM books ORDER BY author_lname;

SELECT title FROM books ORDER BY title DESC;

SELECT released_year FROM books ORDER BY released_year;

SELECT title, pages FROM books ORDER BY released_year;

SELECT title, author_fname, author_lname FROM books ORDER BY 2; #author_fname

SELECT author_fname, author_lname FROM books ORDER BY author_lname, author_fname;

_____________________________________________
LIMIT

SELECT title FROM books limit 3;

SELECT title, released_year FROM books
ORDER BY released_year DESC LIMIT 5;


SELECT title, released_year FROM books
ORDER BY released_year DESC LIMIT 5,5; #FROM POSITION 5, PLUS 5 MORE

_____________________________________________
LIKE

WHERE author_fname LIKE '%da%'; #Wildcards: Any name with 'da' in it

SELECT title, author_fname FROM books WHERE author_fname LIKE '%da%';

SELECT title, author_fname FROM books
WHERE author_fname LIKE 'da%'; #starts with da - case insensitive

_____________________________________________
____ - underscores

SELECT title, stock_quantity FROM books
WHERE stock_quantity LIKE '____'; #stock_quantity has 4 digits, hence the 4 underscores

SELECT title FROM books WHERE title LIKE '%\%%'; #with percent sign on the title

SELECT title FROM books WHERE title LIKE '%\_%'; #with underscores on the title


_____________________________________________

SELECT title FROM books WHERE title LIKE '%stories%';
SELECT title, pages FROM books ORDER BY pages DESC LIMIT 1;
SELECT CONCAT(title, ' - ', released_year) AS summary FROM books ORDER BY released_year DESC LIMIT 3;
SELECT title, author_lname FROM books WHERE author_lname LIKE '% %';
SELECT title, released_year, stock_quantity FROM books ORDER BY stock_quantity ASC LIMIT 3;
SELECT title, author_lname FROM books ORDER BY author_lname, title;
SELECT CONCAT ('MY FAVORITE AUTHOR IS ', UPPER(author_fname), ' ', UPPER(author_lname), '!')
AS yell FROM books ORDER BY author_lname ASC;

_____________________________________________
COUNT

SELECT COUNT(*) FROM books;
SELECT COUNT(DISTINCT author_fname) FROM books;
SELECT COUNT(*) FROM books WHERE title LIKE '%THE%';

_____________________________________________
GROUP BY

SELECT COUNT(*) FROM books GROUP BY author_lname;

SELECT title, author_lname FROM books
GROUP BY author_lname
SELECT author_lname, COUNT(*)
FROM books GROUP BY author_lname;


SELECT title, author_fname, author_lname FROM books;

SELECT title, author_fname, author_lname FROM books GROUP BY author_lname;

SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname;

SELECT author_fname, author_lname, COUNT(*) FROM books GROUP BY author_lname, author_fname;

SELECT released_year FROM books;

SELECT released_year, COUNT(*) FROM books GROUP BY released_year;

SELECT CONCAT('In ', released_year, ' ', COUNT(*), ' book(s) released')
AS year FROM books GROUP BY released_year;

_____________________________________________
MIN AND MAX

SELECT MIN(pages) FROM books;

SELECT * FROM books
WHERE pages = (SELECT Min(pages)
							FROM books;)

SELECT author_fname, author_lname, MIN(released_year)
FROM books
GROUP BY author_lname, author_fname;

SELECT
  author_fname,
  author_lname,
  Max(pages)
FROM books
GROUP BY author_lname,
         author_fname;

SELECT
  CONCAT(author_fname, ' ', author_lname) AS author,
  MAX(pages) AS 'longest book'
FROM books
GROUP BY author_lname,
         author_fname;

_____________________________________________
SUM

SELECT SUM(pages) FROM books;

SELECT author_fname, author_lname SUM(pages)
FROM books
GROUP BY author_lname, author_fname;

_____________________________________________
AVG

SELECT AVG(released_year) FROM books;
SELECT AVG(pages) FROM books;

SELECT AVG(stock_quantity)
FROM books
GROUP BY released_year;
_____________________________________________
SELECT COUNT(*) FROM books;

SELECT released_year, COUNT(*)
FROM books
GROUP BY released_year;

SELECT SUM(stock_quantity) FROM books;

SELECT CONCAT(author_fname, ' ', author_lname) AS author, AVG(released_year)
FROM books
GROUP BY author_lname, author_fname;

SELECT CONCAT(author_fname, ' ', author_lname) as author, pages
FROM books
WHERE pages = (SELECT MAX(pages)
FROM books);

SELECT released_year AS year, COUNT(*) AS "# books", AVG(pages) as "avg pages"
FROM books
GROUP BY released_year;

_____________________________________________
DATA TYPES

CHAR has a fixed length. Always allocate the same amount of space.
Longest is 255. CHAR is faster for fixed length text. State abbreviations, sex.
It truncates when it reaches the limit.

VARCHAR has adaptable length. It grows with the data.

DECIMAL(5,2) - 5 max number of digits (can go up to 65). 2 max number of digits after the
decimal point (can go from 0 to 30). Is exact.

FLOAT AND DOUBLE - Use less space. It comes at the cost of precision.
Floats have precision issues after ~7 digits.
Doubles have precision issues after ~15 digits. Is more precise.
Decimals are more precise.

DATE 'YYYY-MM-DD'
TIME 'HH:MM:SS'
DATETIME 'YYYY-MM-DD HH:MM:SS'

CURDATE() - gives current date
CURTIME() - gives current time
NOW() gives current datetime

Formatting Dates and Times
DAY()
DAYNAME()
DAYOFWEEK()
DAYOFYEAR()

DATE_FORMAT(datetime, format)
SELECT DATE_FORMAT(birthdt, 'Was born on a %W') FROM people;

SELECT DATE_FORMAT(birthdt, '%m/%d/%Y') FROM people;

SELECT DATE_FORMAT(birthdt, '%m/%d/%Y at %h:%i') FROM people;

SELECT * FROM people;

SELECT DATEDIFF(NOW(), birthdate) FROM people;

SELECT name, birthdate, DATEDIFF(NOW(), birthdate) FROM people;

SELECT birthdt FROM people;

SELECT birthdt, DATE_ADD(birthdt, INTERVAL 1 MONTH) FROM people;

SELECT birthdt, DATE_ADD(birthdt, INTERVAL 10 SECOND) FROM people;

SELECT birthdt, DATE_ADD(birthdt, INTERVAL 3 QUARTER) FROM people;

SELECT birthdt, birthdt + INTERVAL 1 MONTH FROM people;

SELECT birthdt, birthdt - INTERVAL 5 MONTH FROM people;

SELECT birthdt, birthdt + INTERVAL 15 MONTH + INTERVAL 10 HOUR FROM people;

TIMESTAMPS - Only go from 1970 to 2038. Takes less space than datetime.

SELECT * FROM comments2 ORDER BY changed_at;

CREATE TABLE comments2 (
    content VARCHAR(100),
    changed_at TIMESTAMP DEFAULT NOW() ON UPDATE NOW()
);


_____________________________________________
LOGICAL OPERATORS

NOT EQUAL !=
NOT LIKE
GREATER THAN >
GREATER THAN OR EQUAL TO >=
LESS THAN <
LESS THAN OR EQUAL TO <=
AND &&
OR  ||
BETWEEN (WHERE released_year BETWEEN 2004 AND 2015)
NOT BETWEEN
CAST()

	SELECT CAST('2017-05-02' AS DATETIME) -> 2017-05-02 00:00:00
	SELECT
	    name,
	    birthdt
	FROM people
	WHERE
	    birthdt BETWEEN CAST('1980-01-01' AS DATETIME)
	    AND CAST('2000-01-01' AS DATETIME);

IN
	SELECT title, author_lname FROM books
	WHERE author_lname IN ('Carver', 'Lahiri', 'Smith');
NOT IN
	SELECT title, released_year FROM books
	WHERE released_year NOT IN
	(2000,2002,2004,2006,2008,2010,2012,2014,2016);

CASE
	SELECT title, stock_quantity,
	    CASE
	        WHEN stock_quantity <= 50 THEN '*'
	        WHEN stock_quantity <= 100 THEN '**'
	        ELSE '***'
	    END AS STOCK
	FROM books;
	SELECT title,
    CASE
        WHEN stock_quantity BETWEEN 0 AND 50 THEN '*'
        WHEN stock_quantity BETWEEN 51 AND 100 THEN '**'
        ELSE '***'
    END AS STOCK
FROM books;

0
1
1
SELECT * FROM books WHERE released_year < 1980;

SELECT * FROM books WHERE author_lname = 'Eggers' OR author_lname = 'Chabon';

SELECT * FROM books WHERE author_lname = 'Lahiri' && released_year > 2000;

SELECT * FROM books WHERE pages BETWEEN 100 AND 200;

SELECT * FROM books WHERE author_lname LIKE 'C%' || author_lname LIKE 'S%';

SELECT title,
CASE
WHEN title LIKE '%stories%' THEN 'Short Stories'
WHEN title IN ('Just Kids', 'A Heartbreaking Work of Staggering Genius') THEN 'Memoir'
ELSE 'Novel'
END AS TYPE
FROM books;

SELECT title, author_lname,
CONCAT(COUNT(title), ' ',
CASE WHEN COUNT(title) = 1 THEN 'book'
ELSE 'books'
END) AS COUNT
FROM books
GROUP BY author_lname, author_fname;
